<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[HUT_QZAPI]]></title>
    <url>%2Fposts%2Fd1e775bf.html</url>
    <content type="text"><![CDATA[HUT 强智教务系统 API地址https://github.com/cxyzzz/HUT_QIANZHI_API参考https://github.com/TLingC/QZAPIAPI列表authUser登录帐号http://218.75.197.123:83/app.do?method=authUser&xh=学号&pwd=密码返回值返回 JSON 对象1234567891011121314151617{ 'success': 登录状态, 'token': 'Token', 'user':{ 'scsj': 未知, 'sjyzm': 未知, 'useraccount': '登录用户', 'usertype': '用户类型，学生为 2', 'userdwmc': '学院', 'username': '用户姓名', 'userpasswd': '用户密码' }, 'userdwmc': '学院', 'userrealname': '用户姓名', 'usertype': '用户类型，学生为 2'}之后的查询均需携带 TokengetStudentIdInfo获取学号信息(已禁止查询)http://218.75.197.123:83/app.do?method=getStudentIdInfo&xh=#学号#返回值返回 JSON 对象123456{ 'bjid'：'未知', 'ndzyid'：'未知', 'yxid'：'未知', 'xxdm'：'未知'}getCurrentTime获取当前时间、周次、学年等信息http://218.75.197.123:83/app.do?method=getCurrentTime&currDate=#查询日期#返回值返回 JSON 对象123456{ 'e_time': '周结束时间', 's_time': '周开始时间', 'xnxqh': '学年', 'zc': '周次'}getKbcxAzc获取课程表http://218.75.197.123:83/app.do?method=getKbcxAzc&xh=#学号#&xnxqid=#学年#&zc=#周次#返回值返回JSON数组123456789101112[ { 'jsmc': '教室名称', 'jssj': '下课时间', 'jsxm': '教师姓名', 'kcmc': '课程名称', 'kkzc': '课程教学周', 'kcsj': '课程时间（eg: 50304 表示星期五第3-4节）', 'kssj': '上课时间', 'sjbz': '未知' }]getXqcx获取校区http://218.75.197.123:83/app.do?method=getXqcx返回值返回JSON数组12345678910[ { 'xqid': '1', 'xqmc': '河东校区' }, { 'xqid': '2', 'xqmc': '河西校区' }]getJxlcx获取校区教学楼信息http://218.75.197.123:83/app.do?method=getJxlcx&xqid=#校区ID#返回值返回JSON数组123456[ { 'jzwid': '教学楼 ID', 'jzwmc': '教学楼名称' }]getKxJscx获取空教室http://218.75.197.123:83/app.do?method=getKxJscx&time=#查询日期#&idleTime=#见下方说明#&xqid=#校区ID#&jxlid=#教学楼ID#&classroomNumber=_#可容纳人数，见下方说明#xqid(校区 ID)、jxlid(教学楼 ID)、classroomNumber(教室容纳人数)是可选参数idleTime取值allday：全天am：上午pm：下午night：晚上classroomNumber30：30人以下30-40：30-40人40-50：40-50人60：60人以上返回值返回JSON数组123456789101112131415161718192021{ 'data': [ { 'jsList': [ { 'jsh': '未知', 'jsid': '教室 ID', 'jsmc': '教室名称', 'jzwid': '所在楼ID', 'jzwmc': '教学楼名称', 'xqmc': '校区名称', 'yxzws': 教室容量, 'zws': 未知，和yxzws相同 } ], 'jxl': '教学楼' } ], 'success': 状态, 'xnxqid': '学年'}getUserInfo获取帐号信息http://218.75.197.123:83/app.do?method=getUserInfo&xh=#学号#返回值返回 JSON 对象123456789101112131415161718{ 'bj': '班级', 'dh': '电话', 'dqszj': '未知，与入学年份、年级相同', 'email': '电子邮箱', 'fxzy': '辅修专业', 'ksh': '高考考号', 'nj': '年级', 'qq': 'QQ 号', 'rxnf': '入学年份', 'usertype': '用户类别，学生为 2', 'xb': '性别', 'xh': '学号', 'xm': '姓名', 'xz': 未知, 'yxmc'：'院系名称', 'zymc'：'专业名称' }getXnxq获取学年和学期信息http://218.75.197.123:83/app.do?method=getXnxq&xh=#学号#返回值返回JSON数组1234567[ { 'isdqxq': '是否为当前学期，1 为是，0 为否', 'xnxq01id': '学年id', 'xqmc': '学年名称' }]getCjcx获取成绩信息http://218.75.197.123:83/app.do?method=getCjcx&xh=#学号#&xnxqid=#学期学年ID#返回值返回 JSON 数组123456789101112131415161718{ 'result': [ { 'bz': 未知, 'cjbsmc': 未知, 'kclbmc': '课程类别名称', 'kcmc': '课程名称', 'kcxzmc': '课程性质名称', 'kcywmc': 未知, 'ksxzmc': '考试性质名称', 'xf': 学分, 'xm': '姓名', 'xqmc': '学期名称', 'zcj': '总成绩' } ]， 'success': 状态}getKscx获取考试信息http://218.75.197.123:83/app.do?method=getKscx&xh=#学号#返回值条件所限，尚未明晰getEarlyWarnInfo获取学籍预警信息http://218.75.197.123:83/app.do?method=getEarlyWarnInfo&xh=#学号#&history=#见下方说明#history取值0：当前预警1：历史预警返回值条件所限，尚未明晰示例支持导出课表为 ics 日历文件WEB 展示(不会前端，使用博客为模板写了课表展示，暂未完善) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title><![CDATA[Android 使用 Rclone 挂载网盘]]></title>
    <url>%2Fposts%2F2a60e472.html</url>
    <content type="text"><![CDATA[点击显示更新信息2019.08.09 更新版本 v1.7.b添加网络检测开关，默认启用，可在.global.param文件中添加NETCHK=0关闭修复当某一 remote 启用绑定到 sdcard 时在其后面的所有 remote 默认启用绑定到 sdcard 的 bug2019.08.08 更新版本 v1.7a修复了 custom_param 不生效的问题添加了更多可自定义的默认参数可以在.*.param中添加HTTP=0,FTP=0禁用 HTTP 和 FTP更改启用绑定到 sdcard 的方式，在.*.param文件中添加BINDSD=1启用，以前版本的添加 .bindsd 文件失效更改BINDPOINT=为SDBINDPOINT=，默认为/sdcard/Cloud/$REMOTE,要更改可在.*.param文件中添加SDBINDPOINT=xx,xx为要绑定的 /sdcard 下的目录名（直接填目录名，不需要路径）2019.08.02 更新作者更新了两个版本，v1.5 支持绑定到 /sdcard/cloud/ 了，在配置目录创建 .bindsd 文件启用，另外加入了网络检测，检测地址为 google.com ，需自行解决网络问题。v1.6 (当前版本) .*.parame 配置文件中增加了ADD_PARAMS和REPLACE_PARAMS用于添加和替换 rclone 挂载参数； 添加了一个 .blobal.param 配置文件用于修改全局参数，README 中只写了 NETCHK_ADDR和BINDPOINT用于修改网络检测地址和挂载点，还可以添加其他的值，但目前并不是很完善，部分默认参数无法修改。提示使用模块前建议先仔细阅读模块说明（README），这个模块并不是装上就能用的。所有 param 文件中最后必须空一行，不然无法识别最后一行的内容。先来两张效果图：点击显示图片 不久前了解到了 rclone 这个东西，rclone 是一个支持在多个网盘及存储服务同步文件和文件夹的命令行程序，使用 GO 语言编写。支持的服务列表可以在官网查看，像微软的 Onedrive 、谷歌的 GDrive 、阿里云对象存储以及支持 FTP、webdav 等协议的存储服务都支持，基本上覆盖了常见的存储服务提供商。使用 rclone 可以很方便的进行管理。 当然今天要说的是 rclone 的挂载功能，rclone 可以将网盘挂载到本地当做磁盘使用。rclone 挂载需要 fusermount 这个程序，在 PC 端很简单，一条命令就安装好了，但在手机端需要自行编译arm 架构的。我在网上找到个能用的 fusermount ，挂载成功了，但只能运行挂载命令的程序才可以访问，这样没有很大意义，后面就放弃了。最近 magisk 仓库更新了个 rclone-mount 模块，将 rclone、fusermount都提供了，并且写好了挂载脚本，作者解释了只能运行挂载命令的程序才能访问的原因。 使用模块需要先安装 magisk，并且由于 Android 系统限制，必须使用 root 权限才能挂载。magisk 安装这里就不多说了，我另一篇文章有介绍。因为模块目前有个 bug 如果没有找到 rclone.conf 文件模块在刷入时会卡住，如果是之前没用过 rclone 的需要先去创建 /sdcard/.rclone/rclone.conf 文件，这样就不会卡在模块安装界面了。安装完模块后接下来是配置 rclone，rclone 用法百度有很多教程，这里我简单说下。 首先要有一个 rclone 支持的网盘，比如 Onedrive，由于需要运行命令，所以需要用到终端，这里我用的是 Termux（推荐），使用其它终端也可以。 先运行 su 获取 root 权限，然后运行 export XDG_CONFIG_HOME=/data/media/0 设置 rclone 配置目录，以免找不到配置文件或者无权限。 /data/adb/modules/com.piyushgarg.rclone/rclone config 会显示当前已配置好的，我的之前已经添加了三个。点击显示图片输入 n 回车创建一个新的远程地址，提示输入名字，这个可以随便取一个方便记住的名字，后面使用的时候就是用的这个名字，之后选择远程地址服务提供商，这里我用的 Onedrive 选 19，其它服务提供商也一样，只是在后面的操作有所不同，具体可以去 rclone 官网查看。选择 19 后接下来的东西用过 pyone、oneindex 等第三方客户端的会很熟悉，没错就是 client_id 和 client_secret，在这里我们都直接回车使用默认的就行。接下来会提示是否更改配置，这个是一些 rclone 的配置属性，直接输入 n 使用默认的即可。最后就是最重要的一步了，提示是否使用自动配置，这里选择 Y，输入后会自动打开浏览器，如果没有，可以手动打开上面显示的地址，登录要使用的账号进行授权，授权成功后返回终端，这里要注意如果是没有管理员或者管理员限制使用第三方应用的是没法认证的。之后会询问是哪种类型的存储，选择 1 也就是 Onedrive 那个就好。然后终端上会显示当前配置，询问配置是否正确选择 y 就回到了刚开始的界面，输入 q 退出。到此 rclone 的配置已经完成，接下来需要把配置文件放在指定位置。配置文件是放在 /data/media/0/rclone/rclone.conf，也就是内置存储下的 rclone/rclone.conf 运行 su -c "cat /data/media/0/rclone/rclone.conf > /data/media/0/.rclone/rclone.conf" 将配置文件添加到内置存储，最后先输入 su 授予 Termux root 权限，再运行 /sbin/rclone remount 等待命令运行完成即可。默认是挂载在 /mnt/cloud/ 目录下，目前无法挂载到 /sdcard 不过作者将在下一版添加这个功能。 最后再附上我的一个利用 rclone 进行备份的脚本，可以保存历史版本，语音播报备份情况。使用 tasker 之类的软件定时运行即可。需要安装 Termux 以及 Termux-API，并且 Termux 安装了 termux-tools，我把 rclone 添加到系统 PATH 里了，所以可以直接调用，如果 rclone 不在 /system/bin/ 或者 /system/xbin/ 中就需要使用 rclone 文件路径来调用（注意文件权限）。点击显示脚本内容12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#!/system/bin/env shexport LANG=C.UTF-8export RCLONE_LOG_LEVEL=INFOexport RCLONE_LOG_FORMAT=date# export RCLONE_BACKUP_DIR="love:/archive/$(date +%Y)/$(date +%F"_"%T)"export RCLONE_BACKUP_DIR="love:/old_files" // 远程地址存储旧版备份文件的文件夹夹export RCLONE_SUFFIX="_$(date +%F_%T)" // 旧备份文件名格式：原文件名_日期_时间export RCLONE_LOG_FILE=/storage/emulated/0/rclone.log #!/system/bin/env shexport LANG=C.UTF-8export RCLONE_LOG_LEVEL=INFOexport RCLONE_LOG_FORMAT=date# export RCLONE_BACKUP_DIR="love:/archive/$(date +%Y)/$(date +%F"_"%T)"export RCLONE_BACKUP_DIR="love:/old_files"export RCLONE_SUFFIX="_$(date +%F_%T)"export RCLONE_LOG_FILE=/storage/emulated/0/rclone.log // 日志export XDG_CONFIG_HOME="/storage/emulated/0/ADM/.config" // 配置文件SD=/storage/emulated/0 // 内置存储# 要备份的目录buckup_dir=(".fooView" "ADM" "baidu" "MyAndroidTools" "Pictures" "searchlite" "ViPER4Android" "Xposed_Edge_Icon" "YueDu" "习")# 清空日志:>$RCLONE_LOG_FILE# 检测网络链接# 超时时间timeout=5 # 目标网站target=baidu.com # 获取响应状态码ret_code=`curl -I -s --connect-timeout $timeout $target -w %{http_code} | tail -n1` if [ "x$ret_code" = "x200" ]; then XiaoAiTTS "网络连接正常,开始备份！" echo "网络连接正常,开始备份！">>$SD/rclone.log for dir in ${buckup_dir[@]} do echo "正在备份 $SD/$dir" rclone sync "$SD/$dir" love:/snapshot/"$dir" done XiaoAiTTS "rclone 备份完成！"echo "$(date +%F"-"%T)\t备份完成！\n">>$SD/rclone.logelse XiaoAiTTS "网络连接异常，停止备份！" echo "网络连接异常，停止备份！">>$SD/rclone.logfiexport XDG_CONFIG_HOME="/storage/emulated/0/ADM/.config"SD=/storage/emulated/0# 备份目录buckup_dir=(".fooView" "ADM" "baidu" "MyAndroidTools" "Pictures" "searchlite" "ViPER4Android" "Xposed_Edge_Icon" "YueDu" "习")# 清空日志:>$RCLONE_LOG_FILE# 检测网络链接# 超时时间timeout=5 # 目标网站target=baidu.com # 获取响应状态码ret_code=`curl -I -s --connect-timeout $timeout $target -w %{http_code} | tail -n1` if [ "x$ret_code" = "x200" ]; then XiaoAiTTS "网络连接正常,开始备份！" echo "网络连接正常,开始备份！">>$SD/rclone.log for dir in ${buckup_dir[@]} do echo "正在备份 $SD/$dir" rclone sync "$SD/$dir" love:/snapshot/"$dir" done XiaoAiTTS "rclone 备份完成！"echo "$(date +%F"-"%T)\t备份完成！\n">>$SD/rclone.logelse XiaoAiTTS "网络连接异常，停止备份！" echo "网络连接异常，停止备份！">>$SD/rclone.logfi 其中 XiaoAiTTS 是我为了方便调用 Termux-API 的 TTS 工具写的小脚本，把它放在 /system/bin 或者 /system/xbin 这样就可以随便调用了，具体内容是：1234#!/system/bin/shexport LD_LIBRARY_PATH=/data/data/com.termux/files/usr/libexport PATH=/data/data/com.termux/files/usr/bin:/data/data/com.termux/files/usr/bin/appletstermux-tts-speak $1 rclone 还有很多功能，我就不一一介绍了，官网上面对每一个命令都有详细点解释，参考官方文档即可。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[玩机 • Android（三）——进阶篇]]></title>
    <url>%2Fposts%2F40e3c7df.html</url>
    <content type="text"><![CDATA[玩机 • Android（一）——应用篇玩机 • Android（二）——ROOT 篇Android 有两个模式：Recovery 和 Bootloader，也叫卡刷模式和线刷模式（部分手机可能不一样，功能都差不多）。Bootloader系统在启动之前需要通过 bootloader 启动，手机启动的时候基带执行初始化，然后引导系统内核，直到系统启动。厂商为了安全，Google 也要求上锁，因而现在的手机基本都对 bootloader 上锁了，不解除就无法对 bootloader 进行更该（官方一般提供了解锁通道，申请通过后就能解锁）。Bootloader 模式通过电脑对设备进行清除数据、系统升级等操作，REC 也是在此模式下刷入的，救砖一般也是进的这个模式。Bootloader 一般是按住电源键和音量减键进入。进入后用数据线连接手机和电脑，电脑会自动安装所需驱动（没有自动安装的可以百度 Bootloader 驱动手动安装），安装好驱动后需要去下载 ADB 工具包Windows https://dl.google.com/android/repository/platform-tools-latest-windows.zipMac https://dl.google.com/android/repository/platform-tools-latest-darwin.zipLinux https://dl.google.com/android/repository/platform-tools-latest-linux.zip进入工具包目录，在当前目录打开终端，输入 adb devices会显示当前设备，如果没显示则可能是驱动没装好。将下载的 Recovery 文件放在当前文件夹中，输入fastboot.exe flash recovery MI-NOTE-TWRP3.1.0.img，刷入 Recovery （MI-NOTE-TWRP3.1.0.img 为文件名字），之后输入fastboot.exe boot MI-NOTE-TWRP3.1.0.img进入 Recovery 模式。Bootloader 还有很多其它的功能，就不多说了（我是不会说其实是我不会其它的（ ￣ー￣））。RecoveryRecovery 看它的名字大概够强猜出其功能了。自带的 Recovery 是非常简陋的，并不能满足我们的要求，所以需要使用如 TWRP、CWM 之类的第三方 REC。替换方法在前面 Bootloader 中有。进入 REC 的方法不同品牌可能有所不同，MIUI 是按住电源键和音量加音量减，出现 logo 后屏幕突然一亮之后松手即可进入。原版 TWRP 是没有中文的，不过一般都能在网上找到支持中文的版本。主要功能为安装、清除、备份、恢复、挂载、设置、高级功能。安装这个就是刷机、获取 ROOT、安装 Magisk、安装 Xposed 等要用到的。点击 Install 进入文件选择界面，默认是刷入卡刷包也可以点击右下角刷入镜像刷入 Recovery 或则 Boot。清除可以恢复出产设置，也可以格式化某一分区。备份/恢复备份/恢复分区挂载挂载分区，一般用不上，使用高级功能式可能会用到。某些手机支持 OTG 功能要在 Recovery 下使用 OTG 存储需进行挂载。设置一些 Recovery 的设置项，比如切换语言调节显示亮度等。高级功能文件浏览器、终端等。进入某些目录时需先保证已近挂载，否则会显示空白。重启高级重启功能。包含重启到 Bootloader、重启到 Recovery、正常重启。介绍完 Bootloader 和 Recovery 后，接下来就是 Magisk 和 Xposed 了。因为这两个都非常强大但也有很大可能导致手机出现问题，所以必须要先准备好第三方 REC 以备不时之需。Magisk安装方法在第二篇 ROOT 篇中已进行介绍此处不在赘述。使用仓库中有很多不错的模块，点击模块即可查看详细信息。也可以手动安装自己下载的模块。注：Magisk 模块可以看做是将模块内容替换系统中对应内容。安装模块前最好打开查看下是否对自己有用。Xposed官网：https://repo.xposed.info/Xposed 框架是一款可以在不修改 APK 的情况下（修改系统）影响程序员运行的框架服务，基于它可以制作很多功能强大的模块。（刷入 Xposed 会对手机性能有一定影响，且随着启用模块越多影响越大（单框架影响不大，主要是模块），开机时间也会变长）安装安装时确保已解锁 Bootloader 、拥有 ROOT 权限。下载 Xposed Installer 安装后打开，先下载卸载包以防出问题后可以卸载。然后点击安装，Install 和 Install via recovery 都差不多，一个是下载后直接安装一个要手动进 REC 卡刷。注：Xposed 兼容性最好的是原生类原生之类的 ROM。国产 UI 可能会卡开机。虽然最新版兼容性已经很好了，但在 MIUI 上还是会出现主题无法修改状态栏样式（SolarWarez 针对 MIUI 发布了修改版，可以完美使用，但已不再更新，目前只支持 Android 6.0 及以下系统）的问题。作者也表示不会针对 MIUI 等进行特别优化。目前 Xposed 最高支持 sdk27 即 Android 8.1。另一种方法是手动下载卡刷包在 REC 中刷入。下载地址：https://dl-xda.xposed.info/framework/需要注意的是安装包 api 和 cpu 架构必须和手机对应。使用刷入后第一次开机示安装应用数可能需要很长时间，期间耐性等待即可。之后就不用这么久了。此为我所使用的模块：以上模块均可在酷安和 Xposed 仓库中找到（点击 Xposed Installer 左上角，侧栏中的下载项就是仓库）。最后再说下，Magisk 能和 Xposed 共存，可以在 Magisk 中安装 Xposed，找到对应的 Magisk 模块安装就行，不过不论是否修改了系统，安装 Xposed 后 Magisk 的 systemless 特性都被破坏，并且使用 Magisk 安装的 Xposed 必须修改版 Xposed Installer 才能识别（点击 Magisk 模块即可看见下载地址）。还有就是 Magisk 和 Xposed 两个是不同的东西，Magisk 实现不了 Xposed 的很多功能。很多人觉得 Xposed 能实现的 Magisk 也能实现是错误的。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[玩机 • Android（二）——ROOT 篇]]></title>
    <url>%2Fposts%2Ffab8c3b3.html</url>
    <content type="text"><![CDATA[Root (Android)首先来了解一下 ROOT 是什么：Root 是 Android 系统的一个术语，它使得用户可以获取 Android 操作系统的超级用户权限。Root 能够帮助用户越过手机制造商的限制，得以卸载本身预装的程序，或运行需要系统权限的动作。Android 系统的 Root 与苹果 iOS 系统的越狱类似。wikipediaROOT_(Android)简单点说就是当你拥有了 ROOT 权限你才能对你的手机想干嘛就干嘛。当然权利越大责任也越大，也意味着会面对更大的风险。因为 ROOT 是非官方行为，所以很多手机产商对 ROOT 后的手机不提供免费维修服务。现在大多数手机均加入了分区保护，未解锁 Bootloader 的情况下无法进行 ROOT 或刷机操作。ROOT 的原理其实是通过系统漏洞或官方后门将 SU 可执行文件复制到 Android 系统的 /system 分区下。为了让用户使用 ROOT 权限，防止手机上任意软件获取 ROOT 权限还需安装一个权限管理软件进行管理。目前主流的超级权限管理工具非 Magisk 和 SuperSU 莫属了。还有如 MIUI、Flyme 以及部分类原生系统自带 ROOT。获取 ROOT获取 ROOT 权限大致有三种方法。一是通过系统漏洞或官方后门通过软件获取，一是直接在刷机包中内置，再就是通过 Recovery 刷入特定的刷机包。最后一种方法应该是用的最广泛也是最简单的了。使用 Recovery 获取 ROOT 需要第三方 Recovery，有 Bootloader 锁的手机还需先解锁。第三方 Recovery 有 TWRP、CWM 等。前面说过 超级权限管理工具有 Magisk 和 SuperSU，它们均提供了对应的卡刷包，刷入即可获取 ROOT 权限。其中 Magisk 并不仅仅只有 ROOT 管理功能，具体将在第三篇中介绍。SuperSU官网: http://www.supersu.com/SuperSU 分 systemless 和 xbin 两种模式，systemless 模式不更该 /system 而是在 /data 目录创建一个 img 文件，在系统启动是加载此文件，好处是不破坏系统，坏处是授权响应慢，可能会因为 SuperSU APP 后台被杀死而无法授权；xbin 模式为将文件写入 /system ，SuperSU APP 将会安装在 /system 目录，需手动对 boot 打补丁，不然会卡开机界面，优点是授权响应快，恢复出厂设置仍能保留 ROOT ，缺点是会破坏系统完整性。官网下载的卡刷包会自动判断使用哪种模式因而不用担心用错。卡刷包可在官网下载，进入 Recovery 刷入即可。有时候可能会遇见刷入后桌面不显示 SuperSU APP ，此时可打开拨号程序输入 *#*#1234#*#* ，同理输入这个也可以在桌面隐藏 SuperSU APP。MagiskMagiskManager: https://magiskmanager.com/XDA： https://forum.xda-developers.com/apps/magiskGithub： https://github.com/topjohnwu/Magisk/releasesMagisk 是一个台湾同胞开发的应用软件，其主要功能是不修改 /system 实现修改的效果，自带了 ROOT 管理。与 SuperSU 一样，需下载卡刷包刷入。卡刷包可在上面三个链接中下载到，也可以直接安装 Magisk Manager APP，然后在 APP 中下载卡刷包。Magisk 与 SuperSU 并不兼容（实际上是因为两个都会修改同一个地方)如果已经刷了 SuperSU 再刷 Magisk 时会出错，此时去 SuperSU 设置中清除 SuperSU 即可（也可以刷入官方 boot）。最后还是那句话：权利越大，责任越大。如果你不清楚你在干什么那么最好不要授权应用 ROOT 权限。当然也没必要对手机 ROOT 后的安全问题太过担心，只要注意授权管理软件的授权提示不乱给软件权限就没事。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VS Code 配置 C 和 C++ 环境]]></title>
    <url>%2Fposts%2Fd5ae7f1b.html</url>
    <content type="text"><![CDATA[Visual Studio Code (简称 VS Code/VSC)是一款免费开源的代码编辑器，支持几乎所有的主流开发语言，有语法高亮、智能代码补全、自定义热键、符号自动补全、代码片段、代码对比 Diff、GIT 等特性，支持插件扩展。软件支持 Windows、Mac 以及 Linux。官网：https://code.visualstudio.com/环境准备VS Code 可在官网下载，其只是一个编辑器并不是 IDE，不含编译器因而需要我们自己安装编译器。编译器我选的是 GCC/G++ 配合 clang 使用，Windows 也可选 MSVC ，Mac 可选 clang 。以 Windows 为例。需去下载 MinGW-w64 和 LLVM 。LLVM Download Page: http://releases.llvm.org/download.html 选Pre-Built Binaries中的Clang for Windows (64-bit)，不需要下.sig文件.MinGW-w64: https://sourceforge.net/projects/mingw-w64/ 直接点 Download 即可。下载好后安装，添加环境变量时选第二项，安装位置选个你能找到的，后面会用到。安装完了以后可能会弹出 cmd 说 MSVC integration install failed。这个是因为 Clang 默认使用的是 msvc 的工具链，而我们选择的工具链是 MinGW，所以就不用管这个提示。MinGW随便装哪，Architecture 选 x86_64，装好以后把东西全部复制到 Clang的文件夹里去，他们会无冲突合并。同样，不做这一步也行，下面的配置里路径就自己改，还要手动把 MinGW 的 bin 文件夹加到 path 中，因为MinGW 不会自己加。至于为什么既要装 Clang 又要装 MinGW，是因为 Clang 没有头文件。然后就可以把 MinGW 删了（Uninstall.exe）。不建议安装多个MinGW，如果你安装了其他 IDE 需要注意把其他的 MinGW 从环境变量中去掉；也可以自己把他们的编译器设为 Clang。因为几乎所有的轻量级 IDE 用的都是MinGW 或 TDM-GCC，它们不制造编译器，只是打包了一个。ps:MinGW 安装时需要在线下载，可能需要科学上网。弄好后可打开 CMD 输入 clang -v 和 gcc -v 应该显示图中内容（版本号不同没事）。如果没有显示就是环境没配置好，可以手动添加到 path （如何配置请自行百度），也可重复上面的操作。配置 VS Code安装扩展需要安装的扩展：C/C++C/C++ Clang Command Adapter 提供静态检测（Lint），很重要。Code Runner 添加右键编译运行代码，支持大多数语言。附：我的插件列表background 修改 VS Code 背景Bracket Pair Colorizer 彩色花括号C/C++ Snippets 代码片段Code Speel Checker 规范命名用filesize 在左下角显示文件大小Include Autocomplete 提供头文件名字的补全One Dark Pro VS Code 主题Setting Sync 同步 VS Code 扩展、设置、代码片段到 GitHub Gist。VSCode Great Icons VS Code 文件夹图标配置四个 json 文件先新建一个用来存放代码的文件夹（工作区)，路径不能包含中文、空格和引号。打开 VS Code 选打开文件夹，选择刚刚创建的文件夹，点击 VS Code 的新建文件夹创建 .vscode 文件夹。（这么做是因为 Windows 资源管理器不允许创建 . 开头的文件夹），然后分别创建 c_cpp_properties.json 、launch.json 、tasks.json 和 settings.json。配置 c_cpp_properties.json点击查看文件详细信息1234567891011121314151617181920212223242526272829303132333435363738394041424344{ "configurations": [ { "name": "Win32", "intelliSenseMode": "clang-x64", "includePath": [ "${workspaceFolder}", "C:/Program Files/Program Files/LLVM/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++", "C:/Program Files/Program Files/LLVM/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32", "C:/Program Files/Program Files/LLVM/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward", "C:/Program Files/LLVM/lib/gcc/x86_64-w64-mingw32/8.1.0/include", "C:/Program Files/LLVM/include", "C:/Program Files/LLVM/x86_64-w64-mingw32/include", "C:/Program Files/LLVM/lib/gcc/x86_64-w64-mingw32/8.1.0/include-fixed", "C:/Program Files/LLVM/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++", "C:/Program Files/LLVM/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/tr1" ], "defines": [ "_DEBUG", "UNICODE", "__GNUC__=7", "__cdecl=__attribute__((__cdecl__))" ], "browse": { "path": [ "${workspaceFolder}", "C:/Program Files/LLVM/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++", "C:/Program Files/LLVM/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32", "C:/Program Files/LLVM/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward", "C:/Program Files/LLVM/lib/gcc/x86_64-w64-mingw32/8.1.0/include", "C:/Program Files/LLVM/include", "C:/Program Files/LLVM/x86_64-w64-mingw32/include", "C:/Program Files/LLVM/lib/gcc/x86_64-w64-mingw32/8.1.0/include-fixed" ], "limitSymbolsToIncludedHeaders": true, "databaseFilename": "" }, "compilerPath": "C:\\Program Files\\LLVM\\bin\\gcc.exe", "cStandard": "c11", "cppStandard": "c++17" } ], "version": 4}可参考 Microsoft/vscode-cpptools 如果没有合并 LLVM 和 MinGW 则 compilerPath 需要改成 MinGW gcc.exe 的路径。Windows 的路径是反斜杠需要使用两个反斜杠来转义，直接使用斜杠也行。includePath 和 browse 中的 path 均为头文件所在路径。ps:偶尔可能会出现提示找不到头文件但能正常编译运行。配置 launch.json点击查看文件详细信息123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051// https://github.com/Microsoft/vscode-cpptools/blob/master/launch.md{ "version": "0.2.0", "configurations": [ { "name": "C Launch", //C 语言调试配置名称 "type": "cppdbg", // 配置类型，这里只能为cppdbg "request": "launch", // 请求配置类型，可以为launch（启动）或attach（附加） "program": "${fileDirname}/${fileBasenameNoExtension}.exe", // 将要进行调试的程序的路径 "args": [], // 程序调试时传递给程序的命令行参数，一般设为空即可 "stopAtEntry": false, // 设为true时程序将暂停在程序入口处 "cwd": "${workspaceFolder}", // 调试程序时的工作目录 "environment": [], // （环境变量？） "externalConsole": true, // 调试时是否显示控制台窗口，一般设置为true显示控制台 "internalConsoleOptions": "neverOpen", // 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？ "MIMode": "gdb", // 指定连接的调试器，可以为gdb或lldb。但目前lldb在windows下没有预编译好的版本。 "miDebuggerPath": "C:/Program Files/LLVM/bin/gdb.exe", // 调试器路径。 "setupCommands": [ { "description": "Enable pretty-printing for gdb", "text": "-enable-pretty-printing", "ignoreFailures": true } ], "preLaunchTask": "CCompile", // 调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应 }, { "name": "C++ Launch", // C++ 调试配置名称 "type": "cppdbg", // 配置类型，这里只能为cppdbg "request": "launch", // 请求配置类型，可以为launch（启动）或attach（附加） "program": "${fileDirname}/${fileBasenameNoExtension}.exe", // 将要进行调试的程序的路径 "args": [], // 程序调试时传递给程序的命令行参数，一般设为空即可 "stopAtEntry": false, // 设为true时程序将暂停在程序入口处 "cwd": "${workspaceFolder}", // 调试程序时的工作目录 "environment": [], // （环境变量？） "externalConsole": true, // 调试时是否显示控制台窗口，一般设置为true显示控制台 "internalConsoleOptions": "neverOpen", // 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡 "MIMode": "gdb", // 指定连接的调试器 "miDebuggerPath": "C:/Program Files/LLVM/bin/gdb.exe", // 调试器路径。 "setupCommands": [ { "description": "Enable pretty-printing for gdb", "text": "-enable-pretty-printing", "ignoreFailures": false } ], "preLaunchTask": "C++Compile" // 调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应 } ]}配置 tasks.json点击查看文件详细信息1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// https://code.visualstudio.com/docs/editor/tasks{ "version": "2.0.0", "tasks": [ { "label": "CCompile", // 任务名称，与launch.json的preLaunchTask相对应 "command": "clang", // 要使用的编译器 "args": [ "${file}", "-o", // 指定输出文件名，不加该参数则默认输出a.exe "${fileDirname}/${fileBasenameNoExtension}.exe", "-g", // 生成和调试有关的信息 "-Wall", // 开启额外警告 "-static-libgcc", // 静态链接 "-fcolor-diagnostics", "--target=x86_64-w64-mingw", // 默认target为msvc，不加这一条就会找不到头文件 "-std=c11" ], // 编译命令参数 "type": "shell", "group": "build", "presentation": { "echo": true, "reveal": "never", // 在“终端”中显示编译信息的策略，可以为always，silent，never。具体参见VSC的文档 "focus": false, "panel": "shared" // 不同的文件的编译信息共享一个终端面板 } }, { "label": "C++Compile", // 任务名称，与launch.json的preLaunchTask相对应 "command": "clang++", // 要使用的编译器 "args": [ "${file}", "-o", // 指定输出文件名，不加该参数则默认输出a.exe "${fileDirname}/${fileBasenameNoExtension}.exe", "-g", // 生成和调试有关的信息 "-Wall", // 开启额外警告 "-static-libgcc", // 静态链接 "-fcolor-diagnostics", "--target=x86_64-w64-mingw", // 默认target为msvc，不加这一条就会找不到头文件 "-std=c++17" ], // 编译命令参数 "type": "shell", "group": "build", "presentation": { "echo": true, "reveal": "never", // 在“终端”中显示编译信息的策略，可以为always，silent，never。具体参见VSC的文档 "focus": false, // 设为true后可以使执行task时焦点聚集在终端，但对编译c和c++来说，设为true没有意义 "panel": "shared" // 不同的文件的编译信息共享一个终端面板 } // "problemMatcher":"$gcc" // 如果你不使用clang，去掉前面的注释符，并在上一条之后加个逗号。) } ]}配置 settings.json点击查看文件详细信息123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172{ "code-runner.runInTerminal": true, // 设置成false会在“输出”中输出，无法交互 "code-runner.executorMap": { "c": "cd $dir && clang $fileName -o $fileNameWithoutExt.exe -Wall -g -Og -static-libgcc -fcolor-diagnostics --target=x86_64-w64-mingw -std=c11 && $dir$fileNameWithoutExt", "cpp": "cd $dir && clang++ $fileName -o $fileNameWithoutExt.exe -Wall -g -Og -static-libgcc -fcolor-diagnostics --target=x86_64-w64-mingw -std=c++17 && $dir$fileNameWithoutExt" }, // 设置code runner的命令行 "code-runner.saveFileBeforeRun": true, // run code前保存 "code-runner.preserveFocus": true, // 若为false，run code后光标会聚焦到终端上。如果需要频繁输入数据可设为false "code-runner.clearPreviousOutput": false, // 每次run code前清空属于code runner的终端消息 "C_Cpp.clang_format_sortIncludes": true, // 格式化时调整include的顺序（按字母排序） "C_Cpp.intelliSenseEngine": "Default", // 可以为Default或Tag Parser，后者较老，功能较简单。具体差别参考cpptools插件文档 "C_Cpp.errorSquiggles": "Disabled", // 因为有clang的lint，所以关掉 "editor.formatOnType": true, // 输入时就进行格式化，默认触发字符较少，分号可以触发 "editor.snippetSuggestions": "top", // snippets代码优先显示补全 "clang.cflags": [ // 控制c语言静态检测的参数 "--target=x86_64-w64-mingw", "-std=c11", "-Wall" ], "clang.cxxflags": [ // 控制c++静态检测时的参数 "--target=x86_64-w64-mingw", "-std=c++17", "-Wall" ], "files.associations": { "iostream": "cpp", "iomanip": "cpp", "array": "cpp", "string_view": "cpp", "random": "cpp", "ostream": "cpp", "atomic": "cpp", "*.tcc": "cpp", "cctype": "cpp", "chrono": "cpp", "clocale": "cpp", "cmath": "cpp", "complex": "cpp", "condition_variable": "cpp", "cstdint": "cpp", "cstdio": "cpp", "cstdlib": "cpp", "cstring": "cpp", "ctime": "cpp", "cwchar": "cpp", "cwctype": "cpp", "exception": "cpp", "fstream": "cpp", "initializer_list": "cpp", "iosfwd": "cpp", "istream": "cpp", "limits": "cpp", "memory": "cpp", "mutex": "cpp", "new": "cpp", "numeric": "cpp", "ratio": "cpp", "sstream": "cpp", "stdexcept": "cpp", "streambuf": "cpp", "system_error": "cpp", "thread": "cpp", "tuple": "cpp", "type_traits": "cpp", "typeinfo": "cpp", "utility": "cpp" }, "cSpell.language": "en", "clang.completion.enable":true // 效果稍好，如果卡，可关掉}建议放置在工作区设置。另附个人设置：点击查看文件详细信息123456789101112131415161718192021222324252627{ "editor.fontFamily": "Consolas, 微软雅黑", // 控制编辑器字体 "workbench.colorTheme": "One Dark Pro", // 主题 "files.trimTrailingWhitespace": true, "sync.gist": "xxxxxxxxxxxxxxxxxxxxx", //settings sync gist "sync.lastUpload": "2018-06-24T05:40:57.167Z", "sync.forceDownload": false, "sync.askGistName": false, "sync.removeExtensions": true, "sync.syncExtensions": true, "workbench.iconTheme": "vscode-great-icons", // 文件夹图标 "files.autoSave": "afterDelay", // 自动保存方式 "files.autoSaveDelay": 120000, // 自动保存延迟 "editor.dragAndDrop": false, // 选中文字后，可以拖动它们调整位置 "explorer.confirmDragAndDrop": false, "explorer.confirmDelete": false, "files.autoGuessEncoding": true, // 自动检测文件编码 "sync.autoDownload": false, // 自动下载备份 "sync.autoUpload": false, //自动上传备份 "sync.lastDownload": "", "sync.host": "", "sync.pathPrefix": "", "sync.quietSync": false, "cSpell.language": "en", "editor.multiCursorModifier": "ctrlCmd", "git.ignoreMissingGitWarning": true,}开始写代码新建一个文件，后缀视语言而定，C 语言为 .c (使用 .cpp 也能运行，但不建议)，C++ 为 .cpp。点击上部分 终端-运行生成任务 （Ctrl + Shift + B)进行编译,Ctrl + F5 只运行。也可按 F5 启用调试。总结VS Code 本身只是个文本编辑器，其他功能都是靠扩展实现的。要实现某个功能必须进行配置才能使用。VS Code 本身颜值很高，相比于 VS 动辄几 G 来说体积也不是很大，运行过程中占用的内存也不多且支持大多数语言。参考链接:https://www.zhihu.com/question/30315894https://blog.csdn.net/u013322949/article/details/60339735 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[玩机 • Android（一）——应用篇]]></title>
    <url>%2Fposts%2F9e7b6f05.html</url>
    <content type="text"><![CDATA[闲来无事，写几篇水文。仅为我个人玩机经历，如果觉得对，欢迎参考，如果不对，请无视。全文分为 [应用篇](#apps)、Root 篇 和 进阶篇。应用前带 [root] 为需 root 权限应用，红色标记为可能会对设备造成损害的应用。黄色标记为需翻墙应用。大部分均可在酷安下载。酷安 发现应用的乐♂趣酷安算是一个不错的应用市场，有很多酷友自己开发的软件，很多大佬交流分享经验。虽然因为越做越大，出现了部分不好的现象，但总体环境还是很好的。特别值得关注的是软件的评论区，多逛逛往往会有很多收获。fooView借用小编的一段话：一款功能十分强大的浮动按钮，各种操作均可用手势完成，单手操作毫不费劲，使用起来也相当智能，毕竟和原来的操作方式有很大改变，需要时间适应，但适应后很可能就停不下来了，总之值得细细把玩一番。fooView 集成了 应用启动器、文件管理器、图片浏览（编辑）器、录屏、长截图、屏幕取词及分词、OCR、浏览器（带去广告b及多线程下载器）、FTP/S 服务及客户端、SFTP、SMB、WebDAV 客户端等等多个功能。足以应付日常使用。可添加自定义任务实现部分 Tasker 的功能，如定时提醒喝水，定时显示天气等等。总而言之是一款功能十分强大的浮动按钮。Via 浏览器via 浏览器是酷友的作品，注重浏览体验，干净利落，化繁为简，简约而不简单。apk 体积仅 503KB 安装后也才 17M ，这相比于其他浏览器动辄上百 M 占用，真的是小太多了。当然 via 小也是有原因的，因为它不带内核，调用的是系统的 WebView，对于系统较新或者能更新 WebView 的手机来说很好，如果是系统比较老的建议使用 夸克 （UC 团队的作品，也很不错）。功能：没有开屏广告，没有新闻推荐，没有广告植入等等一切和浏览器无关的功能。安安静静的做一个浏览器。支持书签云同步支持去广告（可手动标记或同步现成的规则，也可使用 via 的 hosts 拦截）支持油猴脚本（油猴脚本大多数均为电脑界面，手机上使用可能会不兼容）支持自定义浏览器标示，查看源码，查看网络日志，资源嗅探（可调用 ADM 下载或 MXplayer 在线播放）。自定义主页：支持使用 HTML 代码以及 CSS 进行美化，也可使用完整的 html 网页（下图使用的就是 html 文件为主页）缺点： 依赖于系统 WebView 因而不像 QQ 浏览器， UC 浏览器等自带内核浏览器功能多。如 视频播放无法手势控制、悬浮播放。没有账号密码自动填写（作者说会解决）注：via 使用二维码扫描需勾选 via设置-插件-二维码扫描 按提示下载安装 二维码扫描 软件即可。下载管理默认使用系统内置下载器，可勾选 via设置-插件-下载管理 启用 ADM 下载器。附：via 可用脚本及部分主页ADM 下载器 https://www.coolapk.com/apk/com.dv.adm.pay 复制链接到 酷安 客户端打开。主页文件(与图中有部分差异)链接:https://pan.baidu.com/s/1tMZ8Eie_ewVKSIMtLdnpoQ 密码:2htc黑阈对付毒瘤的一大神器，可控制 APP 权限，冻结 APP。需使用 ADB 或 root 开启。免费版有很大限制，支付 5$ 开启所有功能。黑阈版本与价格 作者会不定时进行活动，可关注其酷安动态。附：黑阈使用说明书 （PDF 文件，点击即可下载。强烈建议初次使用时先看一遍）[root]My Android Tools一款神器，能干的事情很爽，遇到一些个流氓app，这东西有用。My Android Tools 可以禁用应用的组件如 服务、广播接收器和活动 等。服务即为我们所用的功能，广播接受器负责接收系统的状态等等，而活动都是在我们使用过程中才启动。活动除了广告活动（带 AD、advertising 字样的 activity ，注意区分 download 等活动）一般不用去禁用，即便禁了效果也不大。主要要禁用的是活动和广播接收器。ps：禁用广告需使用 Pro 版广播接收器如果某个应用你不想让它推送消息那么可以把广播接收器全部禁用了，大多数应用的广播接收器都可以全部禁用（不推荐）。当然最好是针对某一个进行禁用，如 带 boot 的大多为开机自启，对于不需要开机自启的软件可以禁用。带 push 的均为消息推送，保留一个就行（如果软件同时支持 FCM 和国内推送服务且手机装了 Google 服务建议保留 GCM 和一个国内推送服务，MIUI 用户建议保留 Mipush）。服务这个是重点，对付毒瘤软件有奇效。现在很多应用都变得越来越臃肿。拿 QQ来说，运行时内存占用可达 三四百M ，但这里面又有多少是我们真正需要的呢？而使用 My Android Tools 进行调校后 QQ 仅仅占用 30M 左右，并且没有任何功能损失。在广播接受器中说过关闭消息推送，但最有效的还是 服务 和 广播接收器 一起禁用。国内消息推送服务各自为营，为了保活不择手段，当然这是厂商为了保证消息能及时准确推送到用户手里设置的，但这样手机就遭殃了。每打开一个应用就会启动一个推送服务，而推送服务一直挂在后台，部分推送服务甚至会唤醒用户未打开的应用，被唤醒应用又会唤醒其他未打开应用。这就是为什么一打开 xx软件 然后看下后台全家桶全被打开了的原因。国内推送服务有 腾讯的 XG、小米的 XMPush、华为的 HuaweiPush、魅族的 MeizuPush、个推的 gtpush、极光的 jpush、OPPO（coloros）、阿里、百度等等厂商的推送服务。还有 融云 sdk（rong）、个推 sdk（igexin）、友盟 sdk（umeng）等也提供了推送服务。其中支持 XMPush 的应用最多，体验也更接近于 FCM。Android 的 FCM 消息推送其实是很不错的，然而国情所限，体验并没有本土推送服务好。禁用推送服务时可直接搜索 push 展开服务全名进行禁用即可。My Android Tools 可以备份还原自己的禁用列表，也可使用他人分享的备份文件进行恢复。部分组件可能会自动恢复需辅助使用 My Android Tols Xposed ，此为 Xposed 模块，在第三篇中会介绍如何使用 Xposed 模块，此处不做过多介绍。[root]AppOpsX此为 AppOpsX 加入 IFW 支持，原版只含 appops（权限管理）。可限制软件调用权限（即便运行软件时允许权限，若 AppOps 禁止则实际仍为禁止) 软件使用需将其安装为系统程序。（使用前建议查看项目 REANME）在设置中可开启 Intent 防火墙，默认长按显示服务，之后的使用方法与 My Android Tools 无异。效果与 My Android Tools一样，甚至更好。My Android Tools 的配置可转换为 IFW 配置。转换项目地址Taskerhttps://www.coolapk.com/apk/net.dinglisch.android.taskerm 复制链接使用酷安客户端打开。一款系统增强型的软件，可以实现多种自动控制场景，功能非常强大。有一定上手难度，不过好在可以导入别人制作好的配置文件。Shadowsocks/SSR这两个不用多说，爬墙必备工具。锤子BigBang来自于锤子手机 BigBang 功能，但和锤子手机并没有关系。可以全局复制文字，将文字拆分成词组，随意编辑、拖拽组合，提高效率! 单击、双击、长按、复制等多种选词方式随心选。包含翻译、OCR 取词、区域截图、剪贴板等功能。个人觉得分词功能比 fooView 好用。MT管理器 2.0一款强大的文件管理工具和APK逆向修改神器。普通文件管理器的功能都有，特色功能为 APK 编辑功能，主要有 DEX 编辑，ARSC 编辑，XML 编辑，APK 签名、APK 优化、APK 共存、去除签名校验、RES 资源混淆、RES 反资源混淆、翻译模式等。APK 编辑免费用户有部分限制。Telegram https://telegram.org俄罗斯的一款加密即时聊天软件，具有高度保密性。FastHub一款开源的 GitHub 客户端。界面很简洁，该有的功能都有。Mobilism国外知名破解软件站点，发布更新各种破解付费/去广告软件（国外软件居多）。下载需翻墙。SD Maid一款很不错的 SD 卡清理工具。授予 root 权限后效果更好。存储空间清理与 SD Maid 各有优劣。高级功能需付费 3元。BusyBoxLinux 工具里的瑞士军刀,集成了三百多个最常用Linux命令和工具。有无 root 权限均可安装，root 下安装操作不当可能会导致系统无法启动。MIUI 自带 busybox （非最新）。[root]钛备份https://www.coolapk.com/apk/com.keramidas.TitaniumBackup复制链接使用酷安 app 打开。非常强悍的程序和系统备份工具,需安装 BusyBox ，可备份到 Google Drive、Dropbox（需开启增强版）。部分功能需付费。Termux一个强大的终端模拟器，可使用 pkg 及 apt 包管理器。[root] 3C Toolbox一个非常实用的工具箱，包含多个功能。优秀的软件太多太多，这里只写了一部分我正在使用的，并不代表只有这些。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 Mentohust 代替锐捷进行校园网认证]]></title>
    <url>%2Fposts%2F2443be7d.html</url>
    <content type="text"><![CDATA[使用 Mentohust 代替锐捷进行认证。mentohust 有多个平台，此处只讲在路由器上使用。大多数第三方固件均已集成了 Mentohust，如果没有集成的话可自行安装。不想用第三方固件或者不会刷固件可以购买极路由，官方自带锐捷认证。使用 mentohust 需要安装三个软件包，libpcap.ipk、luci-app-mentohust.ipk、mentohust.ipk。其中 luci-app-mentohust.ipk 为 web 管理，可不安装。mentohust.ipk 包也可直接使用 mentohust 二进制包使用命令行运行。软件包需要对应路由器 cpu 架构，此处不提供文件，需自行解决，若实在找不到可在评论留言，我有时间会帮忙编译。部分项目地址：mentohust 加入 v4 支持com.ptpt52.openwrt 含 luci-app-mentohust，mentohust-proxymentohust 所有参数可在终端输入 mentohust -h 查看，输入后显示以下内容：或者直接在 webui 填写 （此为本人所有参数仅供参考）：其中 用户名填：学号@运营商 移动宽带则为移动，电信填电信，联通可直接使用学号。密码为 宽带密码即使用锐捷客户端认证时的密码,网卡选择 WAN 口网卡（可在 web 界面 网络-接口 查看。其他参数按照上图填写即可。也可使用 minieap 进行锐捷认证。我没用过这个，故不作太多介绍。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>锐捷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[路由器]]></title>
    <url>%2Fposts%2F5799c0b3.html</url>
    <content type="text"><![CDATA[此为本人用过的路由器部分资源，写出来方便以后需要。斐讯 k2t官方/官改固件锁定了 u-boot 分区，所以无法在官方/官改固件下刷入 breed，如若确实想用官改，建议先刷入 breed 后再刷回官改。刷入 breed 方法刷入 ptpt52 的解锁 u-boot openwrt 固件特制固件下载地址：openwrt-k2t-initramfs-factory-uboot-unlock.bin解锁 uboot，只用做刷机过渡版本（过渡版本无线不工作，正式版才有无线），不能作为正式使用。开启 telnet，已经开启请忽略这一步，已经刷其他，只要能登录 ssh 或者 telnet 都可以，开启 telnet 参考下面。把 openwrt-k2t-initramfs-factory-uboot-unlock.bin 上传到 /tmp/ 目录下，telnet 或者 ssh 登录后台，执行命令 mtd -r write /tmp/openwrt-k2t-initramfs-factory-uboot-unlock.bin firmware 刷入特制版本固件。已经是 OpenWrt/LEDE 系统，natcap 系统，直接界面升级就好了，不需要刷，请直接下载另外一个固件，到界面升级就可以：openwrt-k2t-uboot-unlock.bin下载的文件校验 MD5：fcbab4d79152aa4de38ee0bdd436883d openwrt-k2t-initramfs-factory-uboot-unlock.bin (解锁 uboot，临时使用，不完整)062173c2f254aa425b5649744ca0c92a openwrt-k2t-uboot-unlock.bin (完整固件，解锁 uboot，用于 OpenWrt 界面升级的操作)进入 openwrt 界面 系统-管理权，开启 ssh 刷入特制版本的 OpenWrt 后，登录界面 http://192.168.15.1/ 进入 系统-管理权 页面，开启 ssh 登录账号密码 root/admin下载 breed，上传到 /tmp 目录 (注意对比 md5 ，特别是使用多线程下载器的)执行命令 mtd write /tmp/breed-qca9563-phicomm-k2t.bin u-boot 刷入 breed。breed 进入方法为开机时长按 rest 键，直至指示灯闪动，电脑使用网线插 lan 口访问 192.168.1.1 即可进入。在 breed 中可进行固件升级，备份，超频等。也可参考此教程官改固件功能：官方固件去掉部分可以程序，添加 adbyby、koolproxy、S-S/S-S-R、KMS、WOL等功能。SSH（缺省用户名：root，密码 admin），telnet 控制。特点：使用官方驱动，信号比第三方好；缺点：功能少，虽然可以使用 opkg 安装软件包，但得自己修改添加 web 开关。开启 telnet 方法(2018.06.13 官方升级到 V22.23.1.158 后, 本工具不支持!)刷入方法：1、先用上面的工具打开 K2T 的 telnet2、用 windows cmd 下的 telnet (默认关闭，需自行开启) 或 putty 连接 K2T。3、使 K2T 处于联网状态，在 telnet 中输入如下命令刷入官改版本wget http://woo.iytc.net/tools/k2tnew.sh -O - |sh（ps:官方/官改固件设置 mentohust 不方便，不推荐在校内做一级路由使用）救砖方法（需要 TTL 转 USB 工具，需拆机，要求一定动手能力。）Openwrt/LEDEOpenwrt/LEDE 不用多说，市面上几乎所有固件都是基于其进行的二次开发，得益于开源，有很多使用教程以及软件包。（刷入 openwrt 需先刷 breed。)ptpt52 Openwrt/LEDElean OpenwrtGargoyle(石像鬼)链接: https://pan.baidu.com/s/1Et-VEY3kg8GW9jzNno3vbQ 提取码: fm3k此为 lean 发布，暂未开源。石像鬼固件最有特色的便是其自带的 QOS。含 adbyby，openvpn。缺点：安装软件包比较麻烦。斐讯K2(PSG1218-64M)Pandavan：荒野无灯 更新日志hiboyhiboyhiboy 更新日志K2 刷入breed另外还有官改固件，但本人觉得最好用的还是 padavan 故未列出。有需要的可自行去恩山查找。品胜云座充(ar9331-pinsen)可刷 TP-Link wr-703n v1 固件。具体请看此文 Pisen云座充购买地址，裸板，18一块。刷 Breed 教程hackpascal-Breed：作者自建下载服务器 &amp;&amp; 百度云 密码：3if1 解压密码：baiduqusi更新日志 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>路由器</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[HUT-Email 登录及部分 EDU 邮箱可用福利]]></title>
    <url>%2Fposts%2Fffffffff.html</url>
    <content type="text"><![CDATA[Hey, password is required here.  document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[路由器使用百度云远程下载]]></title>
    <url>%2Fposts%2Fcfb7bd2a.html</url>
    <content type="text"><![CDATA[BaiduPCS-Go 已被百度关注，原作者也准备停止维护了（[作者] BaiduPCS-Go 已进入最后的维护阶段，有些话想对你们说 ）。目前使用下面方法仍可高速下载，并且不黑号。图中链接：http://pcs.baidu.com/rest/2.0/pcs/file?app_id=265486&method=list&path=%2F快捷脚本见文末在酷安看见 BaiduPCS-Go (一个命令行界面的百度网盘客户端）,当时只是在手机上体验了下就删掉了。不久前弄了个工控板，第一次接触这个，以为能实现 路由器+NAS+小主机 结果 CPU 不支持虚拟化，虽然也能使用虚拟机，但只能使用 32 位系统，性能损失太大。就只装了一个 OpenWrt。这样配置就有点太奢侈了，95% 以上的性能都处于闲置状态，至少对于校园宽带环境的我来说太奢侈。对群晖的功能有点眼馋，所以想着能不能在 OpenWrt 上实现部分群晖的功能。比如远程下载，私有云存储等。经过一番折腾使用 Frp+BaiduPCS-Go+smaba 也算勉强实现了。Frp：一款开源的内网穿透工具，选它的主要原因是配置简单，有很多免费分享的服务器。BaiduPCS-Go：仿 Linux shell 文件处理命令的百度网盘命令行客户端.今天的主角就是它了。smaba： 用来进行文件共享。也可使用其他同类软件。BaiduPCS-Go 使用方法很简单，作者提供了编译好的二进制文件，直接去 realease 页面下载对应架构文件就行。下载后解压，将 BaiduPCS-Go 复制到任意文件夹下即可。使用时须进行登录。常规登录百度帐号支持在线验证绑定的手机号或邮箱,命令：BaiduPCS-Go login使用百度 BDUSS 来登录百度帐号关于 获取百度 BDUSS ，命令：BaiduPCS-Go login -bduss=可使用 BaiduPCS-Go -h 查看帮助。目前 BaiduPCS-Go 支持 多线程下载，上传，离线下载等功能，这里我只介绍下下载，更多使用方法可以查看项目 Readme 文档。使用 ssh 连接路由器，切换到存放 BaiduPCS-Go 的目录，我为了方便使用将文件重命名为 B ，如果是手动下载上传到路由器的还得注意文件权限，如果运行时出现 permission dead 就是无权限，可运行 chmod 0777 ./B 也可在 winscp 里更改。首次运行需要登录才能使用，登录后可先输入 h 查看帮助其他的一些文件处理命令与 linux 一样，如 mv 是移动，cp 是复制，ls 列出当前目录等等。下载文件或目录BaiduPCS-Go download ... BaiduPCS-Go d ...可选参数123456789--test 测试下载, 此操作不会保存文件到本地--ow overwrite, 覆盖已存在的文件--status 输出所有线程的工作状态--save 将下载的文件直接保存到当前工作目录--saveto value 将下载的文件直接保存到指定的目录-x 为文件加上执行权限, (windows系统无效)--share 以分享文件的方式获取下载链接来下载--locate 以获取直链的方式来下载-p value 指定下载线程数支持多个文件或目录的下载.下载的文件默认保存到 程序所在目录 的 download/ 目录, 支持设置指定目录, 重名的文件会自动跳过!使用 ./B config set -savedir /mnt/sdb1可设置下载目录。这样就可以下载了。我用的是默认的 100 线程，下载速度还可以，如果闲速度不满意可适当提高线程数.点击显示图片当然高线程也会吃更多配置。下载完可直接使用 smaba 共享，使用 fooview 进行播放。点击显示图片搭配 frp 将 smaba ，ssh 穿透到外网即可实现远程下载。注意：将路由器 ssh 及 smaba 暴露到外网有一定风险快捷脚本：1234567#/system/bin/shBaiduPCS-Go config set -appid=266719 &>/dev/nullBaiduPCS-Go cp $1 /apps/baidu_shurufa &>/dev/nullBaiduPCS-Go config set -appid=265486 &>/dev/nullBaiduPCS-Go d /apps/baidu_shurufa/*BaiduPCS-Go rm /adds/baidu_shurufa/* &>/dev/nullBaiduPCS-Go config set -appid=266719 &>/dev/null document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[KMS]]></title>
    <url>%2Fposts%2F343b8a35.html</url>
    <content type="text"><![CDATA[路由器上搭建了一个 KMS 服务器，测试了下可以使用。我本人用的数字许可证激活的，不需要 KMS 但弄都弄好了，就发出来算了。算是留个备份。(服务器是搭建在寝室路由器上的，并未进行穿透，因而只能在学校内使用。只要学校网络不出问题，应该都能正常使用，可用 ping 命令测试，如果连不上可能正在重启或是更新固件) ps:因学校网络原因 IP 可能会变化。注意：仅 Windows Vista 及以上系统可以使用 KMS 激活，且 Windows7 旗舰版 不支持 KMS 激活。KMS 激活也需要密钥，且不同版本对应不同密钥。不过这个密钥可以在微软官网找到。此处以 windows 10 专业版为例，其密钥为：W269N-WFGWX-YVC9B-4J6C9-T83GX其他版本也可在微软官网找到。Windows KMS 密钥 https://technet.microsoft.com/en-us/library/jj612867(v=ws.11).aspxOffice KMS 密钥 https://technet.microsoft.com/en-us/library/dn385360(v=office.16).aspxWindows10 2019 LTSC 密钥：M7XTQ-FN8P6-TTKYV-9D4CC-J462D激活 windows 10 专业版右键开始菜单，点击命令提示符（管理员）或者 Windows PowerShell （管理员)输入 slmgr /upk 卸载原有密钥，如果是刚装好的系统，这一步可以省略。输入 slmgr /skms 172.30.192.89 设置 KMS 服务器地址。输入 slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX 安装 KMS 密钥输入 slmgr /ato 查看激活状态，如果显示 “成功地激活了产品”，表示激活成功，每隔 180 天会自动续订，不需要担心激活过期。激活 Office 2016右键开始菜单，点击命令提示符（管理员）或者 Windows PowerShell （管理员)输入 cd "C:\Program Files (x86)\Microsoft Office\Office16" 这个是 Office 激活脚本所在位置，不同的 Office 版本不一样，比如 Office 2013 是 cd "C:\Program Files (x86)\Microsoft Office\Office15"。输入 cscript ospp.vbs /sethst:172.30.192.89 将激活服务器地址设为 172.30.192.89。输入 cscript ospp.vbs /act 激活 office。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
        <tag>Office</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pisen云座充]]></title>
    <url>%2Fposts%2F13b1ea83.html</url>
    <content type="text"><![CDATA[2018/6/19 更新：openwrt 固件链接: https://pan.baidu.com/s/1MqWci4ElhyytjqgCj9GnFw 密码: 7ckw去年在基安看见的一个帖子，品胜云座充的拆机板，看了下可以刷 open-wrt 以及 Tp-link WR703n 的包还有 usb 接口就入手了三块板子。到手后就全刷了 u-boot 刷了个 open-wrt 后就放抽屉里吃灰了。后面翻出来几次装了 mentohust 能登录学校的锐捷后就又吃灰了。 最近因为在弄主路由 k2 的内网穿透，接触到了 opkg 包管理器，突然想到了吃灰的云座充。回到寝室就刷了 wr703n 的 LEDE。接着就是弄 usb 挂载以及存储空间的扩展。ps: LEDE 默认不开启无线网卡，可使用网线连电脑，访问 192.168.1.1 打开无线网卡。若要桥接则要打开 DHCP ，只作 Ap 可不设置，默认静态 ip。安装 usb 设备支持kmod-usb-storage ——必须。大概是 内核支持USB大容量存储设备？kmod-fs- ——必须。格式化分区的文件系统,包含 kmod-fs-ext4, kmod-fs-hfs, kmod-fs-hfsplus, kmod-fs-msdos, kmod-fs-ntfs, kmod-fs-reiserfs and kmod-fs-xfs.我用的是 ext4 分区的，所以装的 kmod-fs-ext4。kmod-usb-storage-extras —— 可选。内核支持更多驱动程序，例如SmartMedia读卡器。不知道干嘛的:p.block-mount ——必需。用于安装和检查块设备（文件系统和交换）和热插拔功能（在设备插入时识别）的脚本。后面的扩展内部存储也要用到。kmod-scsi-core——Any mass storage is a generic SCSI device.不知道干嘛的，机翻是：任何海量存储都是通用的 SCSI 设备。配置 fastab自动创建初始 fstab：ssh 连接路由器 输入block detect > /etc/config/fstab。或者在网页的block-point 项点击自动配置规则。（LEDE 后台管理默认是英文的可以安装 luci-i18n-base-zh-cn 安装完成后就是中文界面了，如果没有可以去设置改成中文）修改 fastab：vi /etc/config/fstab 也可在网页进行配置，但某些参数配置不了。设置 fastab 开机自启：/etc/init.d/fstab enablefastab 还有很多参数，具体可以去 Wiki 查看。扩展内置存储这个可以让路由器从外部存储的镜像启动，我只用了扩展路由的内部空间。将内置存储 /overlay 的文件复制到 USB 存储中：mount /dev/sda1 /mnt ; tar -C /overlay -cvf - . | tar -C /mnt -xf - ; umount /mnt使用以下命令创建fstab:1234block detect > /etc/config/fstab; \ sed -i s/option$'\t'enabled$'\t'\'0\'/option$'\t'enabled$'\t'\'1\'/ /etc/config/fstab; \ sed -i s#/mnt/sda1#/overlay# /etc/config/fstab; \ cat /etc/config/fstab;最后使用下面命令允许安装大于 /rom 的软件：echo option force_space >> /etc/opkg.conf 也可在网页端进行修改。在网页端可以看见 / 分区和 /overlay 变大了，如果 / 分区没变可以插着优盘重启后应会成功挂载。我的是 16g 的内存卡，分了个 128M 的分区出来，可以看到两个分区都正常挂载了，并且成功将 128M 的分区扩展到内部存储。到此品胜云座充的折腾告一段落，接下来就是进行软件方面的设置了。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello-Hexo]]></title>
    <url>%2Fposts%2F59e5d8b8.html</url>
    <content type="text"><![CDATA[Hello Hexo！希望阳光很暖，微风不燥，时光不老，你我都好。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
</search>
